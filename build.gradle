buildscript {
	dependencies {
		classpath group: "com.gradle", name: "build-scan-plugin", version: "1.16"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.change.log.builder", version: "1.1.1"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.source.formatter", version: "2.3.303"
		classpath group: "nu.studer", name: "gradle-credentials-plugin", version: "1.0.4"
	}

	repositories {
		jcenter()

		maven {
			url "https://plugins.gradle.org/m2/"
		}

		maven {
			if (project.hasProperty("release") ) {
				url "https://repository.liferay.com/nexus/content/groups/public"
			}
			else {
				url "https://repository-cdn.liferay.com/nexus/content/groups/public"
			}
		}
	}
}

apply plugin: "com.gradle.build-scan"
apply plugin: "com.liferay.change.log.builder"
apply plugin: "com.liferay.source.formatter"

task clean(type:Delete)
task dockerImageBuild(type:Exec)
task dockerImageDelete(type:Exec)
task dockerNexusDelete(type:Exec)
task dockerNexusStart(type:Exec)
task dockerNexusStop(type:Exec)
task dockerPublishRelease(type:Exec)
task dockerPublishSnapshots(type:Exec)

String userHome = System.getProperty("user.home")

String gradleHome = System.getProperty("gradle.user.home") ?: System.getenv("GRADLE_USER_HOME") ?: new File(userHome, ".gradle").absolutePath

File gradleEncryptedProperties = new File(gradleHome, "gradle.encrypted.properties")

File gradleCredentialsProperties = new File(gradleHome, "gradle.credentials.properties")

boolean localNexus = project.hasProperty("localNexus")

boolean release = project.hasProperty("release")

buildChangeLog {
	changeLogHeader = "BLADE Version ${project.version}"
	dirs = ["cli", "extensions", "gradle", "gradle-tooling", "libs"]
	ticketIdPrefixes = ["BLADE", "IDE", "LPS", "LRDOCS"]
}

dockerImageBuild {
	List<String> args = ['docker', 'build', '--tag', 'liferay-blade-cli-build', '.']

	commandLine args
}

dockerNexusStart {
	executable "./nexus.sh"
}

dockerNexusDelete {
	commandLine "docker", "rm", "/local-nexus"
}

dockerNexusStop {
	commandLine "docker", "stop", "/local-nexus"
	finalizedBy 'dockerNexusDelete'
}

dockerPublishSnapshots {
	dependsOn dockerImageBuild

	if (localNexus) {
		dependsOn 'dockerNexusStart'
		finalizedBy 'dockerNexusStop'
	}

	List<String> args = ['docker', 'run', '--rm', '--init']

	if (localNexus) {
		args.add('--network=host')
	}

	args.addAll(['-v', "${userHome}/.gradle/wrapper:/root/.gradle/wrapper"])

	if (gradleCredentialsProperties.exists()) {
		args.addAll(['-v', "${userHome}/.gradle/gradle.credentials.properties:/root/.gradle/gradle.encrypted.properties"])
	}

	args.add('liferay-blade-cli-build')

	if (localNexus) {
		args.addAll(['snapshots', '--local'])
	}

	commandLine args
}

dockerPublishRelease {
	dependsOn dockerImageBuild

	List<String> args = ['docker', 'run', '--rm', '--init', '-v', "${userHome}/.gradle/wrapper:/root/.gradle/wrapper"]

	if (localNexus) {
		args.add('--network=host')
		dependsOn 'dockerNexusStart'
		finalizedBy 'dockerNexusStop'
	}

	if (gradleCredentialsProperties.exists()) {
		args.addAll(['-v', "${userHome}/.gradle/gradle.credentials.properties:/root/.gradle/gradle.encrypted.properties"])
	}

	args.addAll(['liferay-blade-cli-build', 'release'])

	if (localNexus) {
		args.add('--local')
	}

	commandLine args
}

buildScan {
	termsOfServiceUrl = "https://gradle.com/terms-of-service"
	termsOfServiceAgree = "yes"
}

checkSourceFormatting {
	maxLineLength = 120
}

clean {
	doFirst {
		String mavenLocalRepo = System.getProperty("maven.local.repo")

		if (mavenLocalRepo != null) {
			delete mavenLocalRepo
		}
	}
}

formatSource {
	maxLineLength = 120
}

repositories {
	maven {
		if (release) {
			url "https://repository.liferay.com/nexus/content/groups/public"
		}
		else {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}

	if (localNexus) {
		maven {
			url "http://localhost:8081/nexus/content/groups/public/"
		}
	}
}

subprojects {
	group = "com.liferay.blade"

	plugins.withId("java") {

		apply plugin: "com.liferay.source.formatter"

		if (gradleEncryptedProperties.exists()) {
			apply plugin: "nu.studer.credentials"
		}

		checkSourceFormatting {
			maxLineLength = 120
		}

		formatSource {
			maxLineLength = 120
		}
		sourceCompatibility = "1.8"
		targetCompatibility = "1.8"
	}

	plugins.withId("maven-publish") {
		publishing {
			String liferayNexusUsername
			String liferayNexusPassword

			String repoName = release ? "liferay-public-releases" : "liferay-public-snapshots"
			String repoUrl = "https://repository.liferay.com/nexus/content/repositories/" + repoName

			if (localNexus) {
				liferayNexusUsername = "admin"
				liferayNexusPassword = "admin123"

				if (release) {
					repoUrl = "http://localhost:8081/nexus/content/repositories/releases/"
				}
				else {
					repoUrl = "http://localhost:8081/nexus/content/repositories/snapshots/"
				}
			}
			else
			{

				if (gradleEncryptedProperties.exists()) {
					liferayNexusUsername = credentials.liferayNexusUsername
					liferayNexusPassword = credentials.liferayNexusPassword
				}
			}

			repositories {
				maven {
					credentials {
						username liferayNexusUsername
						password liferayNexusPassword
					}

					url repoUrl
				}
			}
		}
	}

	if (project.hasProperty("mavenLocal")) {
		repositories {
			mavenLocal()
		}
	}
}