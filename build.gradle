buildscript {
	dependencies {
		classpath group: "com.gradle", name: "build-scan-plugin", version: "1.16"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.change.log.builder", version: "1.1.1"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.source.formatter", version: "2.3.303"
		classpath group: "gradle.plugin.com.palantir.gradle.docker", name: "gradle-docker", version: "0.22.1"
		classpath group: "nu.studer", name: "gradle-credentials-plugin", version: "1.0.4"
	}

	repositories {
		jcenter()

		maven {
			url "https://plugins.gradle.org/m2/"
		}

		maven {
			if (project.hasProperty("release")) {
				url "https://repository.liferay.com/nexus/content/groups/public"
			}
			else {
				url "https://repository-cdn.liferay.com/nexus/content/groups/public"
			}
		}
	}
}

apply plugin: "com.gradle.build-scan"
apply plugin: "com.liferay.change.log.builder"
apply plugin: "com.liferay.source.formatter"
apply plugin: "com.palantir.docker-run"

task clean(type:Delete)

buildChangeLog {
	changeLogHeader = "BLADE Version ${project.version}"
	dirs = ["cli", "extensions", "gradle", "gradle-tooling", "libs"]
	ticketIdPrefixes = ["BLADE", "IDE", "LPS", "LRDOCS"]
}

buildScan {
	termsOfServiceUrl = "https://gradle.com/terms-of-service"
	termsOfServiceAgree = "yes"
}

checkSourceFormatting {
	maxLineLength = 120
}

clean {
	doFirst {
		String mavenLocalRepo = System.getProperty("maven.local.repo")

		if (mavenLocalRepo != null) {
			delete mavenLocalRepo
		}
	}
}

dockerRun {
	clean = true
	command 'sh', '/home/gradle/project/gradlew', '-p', '/home/gradle/project/', 'clean', 'jar', 'test', '--stacktrace', '--project-cache-dir', '/home/gradle', '--debug-jvm'
	daemonize false
	env 'GRADLE_USER_HOME': '/home/gradle', 'JAVA_TOOL_OPTIONS': ' -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xmx4096m', 'GRADLE_OPTS': '-Xmx4G'
	image 'openjdk:8-stretch'
	name 'liferay-gradle'
	ports '5005:5005'
	volumes "${System.getProperty('user.dir')}": '/home/gradle/project'
}

formatSource {
	maxLineLength = 120
}

repositories {
	maven {
		if (project.hasProperty("release")) {
			url "https://repository.liferay.com/nexus/content/groups/public"
		}
		else {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

subprojects {
	group = "com.liferay.blade"

	plugins.withId("java") {
		apply plugin: "com.liferay.source.formatter"
		apply plugin: "nu.studer.credentials"

		checkSourceFormatting {
			maxLineLength = 120
		}

		formatSource {
			maxLineLength = 120
		}
		sourceCompatibility = "1.8"
		targetCompatibility = "1.8"
	}

	plugins.withId("maven-publish") {
		publishing {
			String liferayNexusUsername = credentials.liferayNexusUsername
			String liferayNexusPassword = credentials.liferayNexusPassword

			String repoName = project.hasProperty("release") ? "liferay-public-releases" : "liferay-public-snapshots"
			String repoUrl = "https://repository.liferay.com/nexus/content/repositories/" + repoName

			if (project.hasProperty("localNexus")) {
				liferayNexusUsername = "admin"
				liferayNexusPassword = "admin123"

				if (project.hasProperty("release")) {
					repoUrl = "http://localhost:8081/nexus/content/repositories/releases/"
				}
				else {
					repoUrl = "http://localhost:8081/nexus/content/repositories/snapshots/"
				}
			}

			repositories {
				maven {
					credentials {
						username liferayNexusUsername
						password liferayNexusPassword
					}

					url repoUrl
				}
			}
		}
	}
}